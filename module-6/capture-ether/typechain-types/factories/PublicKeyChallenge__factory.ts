/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  PublicKeyChallenge,
  PublicKeyChallengeInterface,
} from "../PublicKeyChallenge";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "isComplete",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "publicKey",
        type: "bytes",
      },
    ],
    name: "authenticate",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60606040527392b28647ae1f3264661f72fb2eb9625a89d88a316000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550341561006357600080fd5b6101f9806100726000396000f30060606040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b2fa1c9e14610051578063ee0d605c1461007e575b600080fd5b341561005c57600080fd5b6100646100db565b604051808215151515815260200191505060405180910390f35b341561008957600080fd5b6100d9600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506100ee565b005b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16816040518082805190602001908083835b60208310151561015c5780518252602082019150602081019050602083039250610137565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900473ffffffffffffffffffffffffffffffffffffffff161415156101af57600080fd5b6001600060146101000a81548160ff021916908315150217905550505600a165627a7a72305820e904a0f15ae58e9e294a3eb01daa450b0e6f5401ab87d70321a0116c3f7f497a0029";

type PublicKeyChallengeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PublicKeyChallengeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PublicKeyChallenge__factory extends ContractFactory {
  constructor(...args: PublicKeyChallengeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PublicKeyChallenge> {
    return super.deploy(overrides || {}) as Promise<PublicKeyChallenge>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PublicKeyChallenge {
    return super.attach(address) as PublicKeyChallenge;
  }
  override connect(signer: Signer): PublicKeyChallenge__factory {
    return super.connect(signer) as PublicKeyChallenge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PublicKeyChallengeInterface {
    return new utils.Interface(_abi) as PublicKeyChallengeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PublicKeyChallenge {
    return new Contract(address, _abi, signerOrProvider) as PublicKeyChallenge;
  }
}
