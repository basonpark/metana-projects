/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  NicknameChallenge,
  NicknameChallengeInterface,
} from "../../NicknameChallenge.sol/NicknameChallenge";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "isComplete",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        name: "_player",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550341561004f57600080fd5b6040516020806102ce8339810160405280805190602001909190505080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610212806100bc6000396000f300606060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b2fa1c9e14610046575b600080fd5b341561005157600080fd5b610059610073565b604051808215151515815260200191505060405180910390f35b6000807f0100000000000000000000000000000000000000000000000000000000000000026000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636790081c600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561017557600080fd5b5af1151561018257600080fd5b50505060405180519050600060208110151561019a57fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614159050905600a165627a7a723058202009007a0daa8cba9adbb52ba453189d3f91c88452edc4dc09da8e05d71376600029";

type NicknameChallengeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NicknameChallengeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NicknameChallenge__factory extends ContractFactory {
  constructor(...args: NicknameChallengeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NicknameChallenge> {
    return super.deploy(_player, overrides || {}) as Promise<NicknameChallenge>;
  }
  override getDeployTransaction(
    _player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_player, overrides || {});
  }
  override attach(address: string): NicknameChallenge {
    return super.attach(address) as NicknameChallenge;
  }
  override connect(signer: Signer): NicknameChallenge__factory {
    return super.connect(signer) as NicknameChallenge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NicknameChallengeInterface {
    return new utils.Interface(_abi) as NicknameChallengeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NicknameChallenge {
    return new Contract(address, _abi, signerOrProvider) as NicknameChallenge;
  }
}
