/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  DeployChallenge,
  DeployChallengeInterface,
} from "../DeployChallenge";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "isComplete",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60606040523415600e57600080fd5b60a38061001c6000396000f300606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b2fa1c9e146044575b600080fd5b3415604e57600080fd5b6054606e565b604051808215151515815260200191505060405180910390f35b600060019050905600a165627a7a723058201373de235103dea9ea309d2337f574aeba182d967b8dc28ffb6be86e4f97a8980029";

type DeployChallengeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DeployChallengeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DeployChallenge__factory extends ContractFactory {
  constructor(...args: DeployChallengeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DeployChallenge> {
    return super.deploy(overrides || {}) as Promise<DeployChallenge>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DeployChallenge {
    return super.attach(address) as DeployChallenge;
  }
  override connect(signer: Signer): DeployChallenge__factory {
    return super.connect(signer) as DeployChallenge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DeployChallengeInterface {
    return new utils.Interface(_abi) as DeployChallengeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DeployChallenge {
    return new Contract(address, _abi, signerOrProvider) as DeployChallenge;
  }
}
