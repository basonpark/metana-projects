/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  CallMeChallenge,
  CallMeChallengeInterface,
} from "../CallMeChallenge";

const _abi = [
  {
    constant: false,
    inputs: [],
    name: "callme",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "isComplete",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x606060405260008060006101000a81548160ff021916908315150217905550341561002957600080fd5b60e4806100376000396000f3006060604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a3c8e39314604e578063b2fa1c9e146060575b600080fd5b3415605857600080fd5b605e608a565b005b3415606a57600080fd5b607060a6565b604051808215151515815260200191505060405180910390f35b60016000806101000a81548160ff021916908315150217905550565b6000809054906101000a900460ff16815600a165627a7a7230582059f600fc82728749d00f16a0725a92562ff5286059f759f6258245e29629cff60029";

type CallMeChallengeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CallMeChallengeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CallMeChallenge__factory extends ContractFactory {
  constructor(...args: CallMeChallengeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CallMeChallenge> {
    return super.deploy(overrides || {}) as Promise<CallMeChallenge>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CallMeChallenge {
    return super.attach(address) as CallMeChallenge;
  }
  override connect(signer: Signer): CallMeChallenge__factory {
    return super.connect(signer) as CallMeChallenge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallMeChallengeInterface {
    return new utils.Interface(_abi) as CallMeChallengeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CallMeChallenge {
    return new Contract(address, _abi, signerOrProvider) as CallMeChallenge;
  }
}
