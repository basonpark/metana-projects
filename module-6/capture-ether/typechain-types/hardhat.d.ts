/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccountTakeoverChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccountTakeoverChallenge__factory>;
    getContractFactory(
      name: "AssumeOwnershipChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssumeOwnershipChallenge__factory>;
    getContractFactory(
      name: "CallMeChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallMeChallenge__factory>;
    getContractFactory(
      name: "DeployChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeployChallenge__factory>;
    getContractFactory(
      name: "DonationChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DonationChallenge__factory>;
    getContractFactory(
      name: "FiftyYearsChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FiftyYearsChallenge__factory>;
    getContractFactory(
      name: "FuzzyIdentityChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FuzzyIdentityChallenge__factory>;
    getContractFactory(
      name: "IName",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IName__factory>;
    getContractFactory(
      name: "GuessTheNewNumberChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GuessTheNewNumberChallenge__factory>;
    getContractFactory(
      name: "GuessTheNumberChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GuessTheNumberChallenge__factory>;
    getContractFactory(
      name: "GuessTheRandomNumberChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GuessTheRandomNumberChallenge__factory>;
    getContractFactory(
      name: "GuessTheSecretNumberChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GuessTheSecretNumberChallenge__factory>;
    getContractFactory(
      name: "MappingChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MappingChallenge__factory>;
    getContractFactory(
      name: "CaptureTheEther",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CaptureTheEther__factory>;
    getContractFactory(
      name: "NicknameChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NicknameChallenge__factory>;
    getContractFactory(
      name: "PredictTheBlockHashChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PredictTheBlockHashChallenge__factory>;
    getContractFactory(
      name: "PredictTheFutureChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PredictTheFutureChallenge__factory>;
    getContractFactory(
      name: "PublicKeyChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PublicKeyChallenge__factory>;
    getContractFactory(
      name: "RetirementFundChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RetirementFundChallenge__factory>;
    getContractFactory(
      name: "ITokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenReceiver__factory>;
    getContractFactory(
      name: "SimpleERC223Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleERC223Token__factory>;
    getContractFactory(
      name: "TokenBankChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenBankChallenge__factory>;
    getContractFactory(
      name: "TokenSaleChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenSaleChallenge__factory>;
    getContractFactory(
      name: "TokenWhaleChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenWhaleChallenge__factory>;

    getContractAt(
      name: "AccountTakeoverChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccountTakeoverChallenge>;
    getContractAt(
      name: "AssumeOwnershipChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssumeOwnershipChallenge>;
    getContractAt(
      name: "CallMeChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallMeChallenge>;
    getContractAt(
      name: "DeployChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeployChallenge>;
    getContractAt(
      name: "DonationChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DonationChallenge>;
    getContractAt(
      name: "FiftyYearsChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FiftyYearsChallenge>;
    getContractAt(
      name: "FuzzyIdentityChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FuzzyIdentityChallenge>;
    getContractAt(
      name: "IName",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IName>;
    getContractAt(
      name: "GuessTheNewNumberChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GuessTheNewNumberChallenge>;
    getContractAt(
      name: "GuessTheNumberChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GuessTheNumberChallenge>;
    getContractAt(
      name: "GuessTheRandomNumberChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GuessTheRandomNumberChallenge>;
    getContractAt(
      name: "GuessTheSecretNumberChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GuessTheSecretNumberChallenge>;
    getContractAt(
      name: "MappingChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MappingChallenge>;
    getContractAt(
      name: "CaptureTheEther",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CaptureTheEther>;
    getContractAt(
      name: "NicknameChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NicknameChallenge>;
    getContractAt(
      name: "PredictTheBlockHashChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PredictTheBlockHashChallenge>;
    getContractAt(
      name: "PredictTheFutureChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PredictTheFutureChallenge>;
    getContractAt(
      name: "PublicKeyChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PublicKeyChallenge>;
    getContractAt(
      name: "RetirementFundChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RetirementFundChallenge>;
    getContractAt(
      name: "ITokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenReceiver>;
    getContractAt(
      name: "SimpleERC223Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleERC223Token>;
    getContractAt(
      name: "TokenBankChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenBankChallenge>;
    getContractAt(
      name: "TokenSaleChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenSaleChallenge>;
    getContractAt(
      name: "TokenWhaleChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenWhaleChallenge>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
